// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è CONFIG
if (typeof CONFIG === 'undefined') {
    console.error('CONFIG is not defined. Please check your configuration setup.');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
}

console.log('CONFIG:', CONFIG); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

let tg = window.Telegram.WebApp;
tg.expand();

let item = "";
let eventSource;

function setupEventSource() {
    eventSource = new EventSource(CONFIG.SSE_ENDPOINT);

    eventSource.onmessage = function(event) {
        const data = JSON.parse(event.data);
        handleServerMessage(data);
    };

    eventSource.onerror = function(error) {
        console.error('EventSource failed:', error);
        eventSource.close();
        setTimeout(setupEventSource, CONFIG.APP_SETTINGS.RECONNECT_TIMEOUT);
    };
}

setupEventSource();

function handleServerMessage(data) {
    if (data.type === 'bot_response') {
        addMessageToChat('–ë–æ—Ç', data.text);
        if (data.audio) {
            playAudio(data.audio);
        }
        if (data.order_confirmation) {
            processVoiceOrder(data.text);
        }
    }
}

function sendMessage(text) {
    if (text.trim() === '') return;
    
    addMessageToChat('–í—ã', text);
    
    fetch(CONFIG.MESSAGE_ENDPOINT, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({type: 'text_message', text: text}),
    })
    .then(response => response.json())
    .then(data => console.log('Success:', data))
    .catch((error) => console.error('Error:', error));
    
    textInput.value = '';
}

function setupButton(btn, text, itemValue) {
    btn.addEventListener("click", function(){
        if (tg.MainButton.isVisible) {
            tg.MainButton.hide();
        } else {
            tg.MainButton.setText(text);
            item = itemValue;
            tg.MainButton.show();
        }
    });
}

setupButton(document.getElementById("btn-shawarma"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞—É—Ä–º—É!", CONFIG.MENU_ITEMS.SHAWARMA);
setupButton(document.getElementById("btn2"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∏—Ç—É!", CONFIG.MENU_ITEMS.PITA);
setupButton(document.getElementById("btn3"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ö—É–º—É—Å!", CONFIG.MENU_ITEMS.HUMMUS);
setupButton(document.getElementById("btn4"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —à–∞—à–ª—ã–∫ –∏–∑ –∫—É—Ä–∏—Ü—ã!", CONFIG.MENU_ITEMS.CHICKEN_SHISH);
setupButton(document.getElementById("btn5"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—ë–∑–ª–µ–º–µ!", CONFIG.MENU_ITEMS.GOZLEME);
setupButton(document.getElementById("btn6"), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–µ—á–µ–≤–∏—á–Ω—ã–π —Å—É–ø!", CONFIG.MENU_ITEMS.LENTIL_SOUP);

Telegram.WebApp.onEvent("mainButtonClicked", function(){
    sendMessage(`–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é: ${item}`);
});

let usercard = document.getElementById("usercard");
let p = document.createElement("p");
p.innerText = `${tg.initDataUnsafe.user.first_name} ${tg.initDataUnsafe.user.last_name}`;
usercard.appendChild(p);

const voiceOrderBtn = document.getElementById('voiceOrderBtn');
const voiceInterface = document.getElementById('voiceInterface');
const chatDiv = document.getElementById('chat');
const textInput = document.getElementById('textInput');
const sendTextBtn = document.getElementById('sendTextBtn');
const recordVoiceBtn = document.getElementById('recordVoiceBtn');

let mediaRecorder;
let audioChunks = [];

voiceOrderBtn.addEventListener('click', toggleVoiceInterface);
sendTextBtn.addEventListener('click', () => sendMessage(textInput.value));
recordVoiceBtn.addEventListener('mousedown', startRecording);
recordVoiceBtn.addEventListener('mouseup', stopRecording);

function toggleVoiceInterface() {
    voiceInterface.style.display = voiceInterface.style.display === 'none' ? 'block' : 'none';
    voiceOrderBtn.textContent = voiceInterface.style.display === 'none' ? 'üé§' : '‚ùå';
}

async function startRecording() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
        mediaRecorder = new MediaRecorder(stream);
        audioChunks = [];

        mediaRecorder.addEventListener('dataavailable', event => {
            audioChunks.push(event.data);
        });

        mediaRecorder.start();
        recordVoiceBtn.textContent = '–ó–∞–ø–∏—Å—å...';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.');
    }
}

function stopRecording() {
    if (!mediaRecorder) return;

    mediaRecorder.stop();
    recordVoiceBtn.textContent = '–ó–∞–ø–∏—Å—å';
    mediaRecorder.addEventListener('stop', () => {
        const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
        sendAudioMessage(audioBlob);
    });
}

function sendAudioMessage(audioBlob) {
    const reader = new FileReader();
    reader.readAsDataURL(audioBlob);
    reader.onloadend = function() {
        const base64Audio = reader.result.split(',')[1];
        fetch(CONFIG.AUDIO_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({type: 'voice_message', audio: base64Audio}),
        })
        .then(response => response.json())
        .then(data => console.log('Audio sent successfully:', data))
        .catch(error => console.error('Error sending audio:', error));
    }
}

function addMessageToChat(sender, message) {
    const messageElement = document.createElement('p');
    messageElement.textContent = `${sender}: ${message}`;
    chatDiv.appendChild(messageElement);
    chatDiv.scrollTop = chatDiv.scrollHeight;
}

function playAudio(base64Audio) {
    try {
        const audio = new Audio("data:audio/mp3;base64," + base64Audio);
        audio.play();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∞—É–¥–∏–æ:', error);
    }
}

function processVoiceOrder(speechText) {
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞:', speechText);
    speechText = speechText.toLowerCase();
    if (speechText.includes('—à–∞—É—Ä–º–∞')) {
        document.getElementById("btn-shawarma").click();
    } else if (speechText.includes('–ø–∏—Ç–∞')) {
        document.getElementById("btn2").click();
    } else if (speechText.includes('—Ö—É–º—É—Å')) {
        document.getElementById("btn3").click();
    } else if (speechText.includes('—à–∞—à–ª—ã–∫') || speechText.includes('–∫—É—Ä–∏—Ü–∞')) {
        document.getElementById("btn4").click();
    } else if (speechText.includes('–≥—ë–∑–ª–µ–º–µ')) {
        document.getElementById("btn5").click();
    } else if (speechText.includes('—Å—É–ø') || speechText.includes('—á–µ—á–µ–≤–∏—á–Ω—ã–π')) {
        document.getElementById("btn6").click();
    } else {
        addMessageToChat('–ë–æ—Ç', '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}

tg.onEvent('viewportChanged', function() {
    console.log('Viewport changed. Checking connection...');
    if (eventSource.readyState === EventSource.CLOSED) {
        console.log('EventSource –∑–∞–∫—Ä—ã—Ç, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        setupEventSource();
    }
});
